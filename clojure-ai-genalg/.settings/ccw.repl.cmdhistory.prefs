cmdhistory=["(doc lo2)" "(doc log2)" "(use clojure.repl)" "(use 'clojure.repl)" "(doc log2)" "(doc assoc)" "(doc log2)" "(clojure.pprint/write '(defn factorial \\r\\n  \\"Returns the factorial from number. Eg. 5\! \= 120\\"\\r\\n ([number]\\r\\n   (factorial number 1))\\r\\n ([number accumulator]\\r\\n   (if (\= n 0) accumulator\\r\\n     (recur (dec n) (* accumulator number))))))" "(factorial 5)" "(doc factorial)" "(factorial 5)" "(def p1 (make-array 20 20))" "(def p1 (make-array Integer/TYPE 20 20))" "(clojure.pprint p1)" "p1" "(pprint p1)" "(clojure.pprint/pprint p1)" "(alength p1)" "(defmulti is-valid? Individual)" "(def proba (Individual. 9348 3498 3498 4398 4398))" "(ns clojure-ai-genalg.individual)" "(def proba (Individual. 9348 3498 3498 4398 4398))" "(is-valid? proba)" "(take 5)" "(take 5 (repeatedly (rand)))" "(take 5 (repeatedly rand))" "(clojure-ai-genalg.city-examples/city-example1)" "(clojure.pprint/pprint clojure-ai-genalg.city-examples/city-example1)" "(first clojure-ai-genalg.city-examples/city-example1)" "(all-ns)" "(ns clojure-ai-genalg.city-examples)" "(ns clojure-ai-genalg.individual\\r\\n  (\:use clojure-ai-genalg.utils)\\n  (\:use clojure-ai-genalg.city-examples))" "(get-decimal-rep-from-map clojure-ai-genalg.city-examples)" "(get-decimal-rep-from-map clojure-ai-genalg.city-examples/example-city1\\n                        )" "(ns clojure-ai-genalg.city-examples)" "(city-example1)" "(ns clojure-ai-genalg.individual)" "(get-decimal-rep-from-map clojure-ai-genalg.city-examples/city-example1)" "(alength clojure-ai-genalg.city-examples/city-example1)" "(count clojure-ai-genalg.city-examples/city-example1)" "(first clojure-ai-genalg.city-examples/city-example1)" "(get-decimal-rep-from-map clojure-ai-genalg.city-examples/city-example1)" "(def a1 (spawn-individual clojure-ai-genalg.city-examples/city-example1))" "(def ind1 (spawn-individual clojure-ai-genalg.city-examples/city-example1))" "(ind1)" "(\:decimal-rep ind1)" "(\:map-of-cities ind1)" "(def ind1 (spawn-individual clojure-ai-genalg.city-examples/city-example1))" "(\:map-of-cities ind1)" "(\:decimal-rep ind1)" "(java.lang.Integer/toString 30)" "(java.lang.Integer/toString 30 2)" "(doseq [ item (java.lang.Integer/toString 30 2)] (prn item))" "(doseq [ item (java.lang.Integer/toString 30 2)] (cons item ()))" "(doseq [ item (java.lang.Integer/toString 30 2)] (cons item (1)))" "(doseq [ item (java.lang.Integer/toString 30 2)] (cons item))" "(doseq [ item (java.lang.Integer/toString 30 2)] (cons item ()))" "(doseq [ item (java.lang.Integer/toString 30 2)] (prn (cons item ())))" "(let [tmp ()] (doseq [ item (java.lang.Integer/toString 30 2)] (cons item tmp)))" "(let [tmp ()] (prn tmp (doseq [ item (java.lang.Integer/toString 30 2)] (cons item tmp))))" "(cons 3 (1 2))" "(first (2 3))" "(first [2 3])" "(cons 1 [2 3])" "(conj 1 (2 3))" "(conj (2 3) 1)" "(conj '(2 3) 1)" "(nth (java.lang.Integer/toString 30 2) 3)" "(clojure.pprint/cl-format nil ~8,'0d (java.lang.Integer/toString 30 2))" "(clojure.pprint/cl-format nil \\"~8,'0d\\" (java.lang.Integer/toString 30 2))" "(clojure.pprint/cl-format nil \\"~d,'0d\\" (first '(8)) (java.lang.Integer/toString 30 2))" "(clojure.pprint/cl-format nil \\"~8,'0d\\" (java.lang.Integer/toString 30 2))" "(clojure.pprint/cl-format nil \\"'~d,'0d\\" (first '(8)) (java.lang.Integer/toString 30 2))" "(clojure.pprint/cl-format nil \\"'~8,'0d\\" (first '(8)) (java.lang.Integer/toString 30 2))" "(clojure.pprint/cl-format nil (clojure.string/replace \\"'~tempToken,'0d\\" \#\\"tempToken\\" 8) (java.lang.Integer/toString 30 2))" "(clojure.pprint/cl-format nil (clojure.string/replace \\"'~tempToken,'0d\\" \#\\"tempToken\\" (str 8)) (java.lang.Integer/toString 30 2))" "(clojure.pprint/cl-format nil (clojure.string/replace \\"~tempToken,'0d\\" \#\\"tempToken\\" (str 8)) (java.lang.Integer/toString 30 2))" "(a-test)" "(run-tests)" "(decimal-rep-to-path 4 clojure-ai-genalg.city-examples/city-example1)" "(decimal-rep-to-path 1 clojure-ai-genalg.city-examples/city-example1)" "(decimal-rep-to-path 2 clojure-ai-genalg.city-examples/city-example1)" "(decimal-rep-to-path 0 clojure-ai-genalg.city-examples/city-example1)" "(decimal-rep-to-path 1 clojure-ai-genalg.city-examples/city-example1)" "(decimal-rep-to-path 4 clojure-ai-genalg.city-examples/city-example1)" "(clojure-ai-genalg.utils/remove-nth-from-vec [1 2 3 4] 2)" "(decimal-rep-to-path 4 clojure-ai-genalg.city-examples/city-example1)" "(use 'clojure.tools.trace)" "(trace-vars clojure-ai-genalg.individual/decimal-rep-to-path)" "(decimal-rep-to-path 4 clojure-ai-genalg.city-examples/city-example1)" "(use 'clojure.tools.trace)" "(trace-ns clojure-ai-genalg.individual)" "(trace-ns clojure-ai-genalg/individual)" "(trace-ns 'clojure-ai-genalg.individual)" "(decimal-rep-to-path 4 clojure-ai-genalg.city-examples/city-example1)" "(clojure-ai-genalg.utils/remove-nth-from-vec 2 [3 4 8 5])" "(clojure-ai-genalg.utils/remove-nth-from-vec [3 4 8 5] 2)" "(mod 5 (clojure-ai-genalg.utils/factorial 4))" "(clojure-ai-genalg.utils/factorial 4)" "(mod(clojure-ai-genalg.utils/factorial 4) 5)" "(decimal-rep-to-path 4 clojure-ai-genalg.city-examples/city-example1)" "(clojure-ai-genalg.utils/remove-nth-from-vec [1 2 3 4] 2)" "(nth [1 2 3 4] 2)" "(cons (vector) (nth [1 2 3 4] 2))" "(conj (vector) (nth [1 2 3 4] 2))" "(decimal-rep-to-path 4 clojure-ai-genalg.city-examples/city-example1)" "(run-tests)" "(get-binary-rep-from-decimal-rep 13 2)" "(->Individual \\r\\n                               (get-binary-rep-from-decimal-rep 3 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example1))))) \\r\\n                               3 \\r\\n                               (decimal-rep-to-path 3) \\r\\n                               clojure-ai-genalg.city-examples/city-example1 \\r\\n                               0)" "(run-tests)" "(->Individual \\r\\n                               (get-binary-rep-from-decimal-rep 3 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example1))))) \\r\\n                               3 \\r\\n                               (decimal-rep-to-path 3 clojure-ai-genalg.city-examples/city-example1 ) \\r\\n                               clojure-ai-genalg.city-examples/city-example1 \\r\\n                               0)" "(is-valid? (->Individual \\r\\n                               (get-binary-rep-from-decimal-rep 3 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example1))))) \\r\\n                               3 \\r\\n                               (decimal-rep-to-path 3 clojure-ai-genalg.city-examples/city-example1 ) \\r\\n                               clojure-ai-genalg.city-examples/city-example1 \\r\\n                               0))" "(run-tests)" "(is-valid? (->Individual \\r\\n                               (get-binary-rep-from-decimal-rep 3 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example1))))) \\r\\n                               3 \\r\\n                               (decimal-rep-to-path 3 clojure-ai-genalg.city-examples/city-example1 ) \\r\\n                               clojure-ai-genalg.city-examples/city-example1 \\r\\n                               0))" "(is-valid? (->Individual \\r\\n                               (get-binary-rep-from-decimal-rep 13 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example1))))) \\r\\n                               13 \\r\\n                               (decimal-rep-to-path 13 clojure-ai-genalg.city-examples/city-example1 ) \\r\\n                               clojure-ai-genalg.city-examples/city-example1 \\r\\n                               0))" "(get-binary-rep-from-decimal-rep 13 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example1)))))" "(is-valid? (->Individual 0 39 0 clojure-ai-genalg.city-examples/city-example1 ))" "(is-valid? (->Individual 0\\n                         39 \\n                         0 \\n                         clojure-ai-genalg.city-examples/city-example1\\n                         0))" "(is-valid? (->Individual 0\\n                         3\\n                         0 \\n                         clojure-ai-genalg.city-examples/city-example1\\n                         0))" "(run-tests)" "(spawn-individual clojure-ai-genalg.city-examples/city-example1)" "(run-tests)" "(binary-rep-to-dec \\"0101\\")" "(binary-rep-to-dec \\"0000101\\")" "(run-tests)" "(spawn-individual -2)" "(spawn-individual clojure-ai-genalg.city-examples/city-example1 -2)" "(spawn-individual clojure-ai-genalg.city-examples/city-example1 4)" "(spawn-individual clojure-ai-genalg.city-examples/city-example1 -2)" "(spawn-individual clojure-ai-genalg.city-examples/city-example1 5)" "[[0 2 5]\\r\\n                    [1 0 4]\\r\\n                    [5 3 0]]" "(nth (nth [[0 2 5]\\r\\n           [1 0 4]\\r\\n           [5 3 0]] 2) 1)" "(nth [[0 2 5]\\r\\n           [1 0 4]\\r\\n           [5 3 0]] 2)" "(let [from (nth [2 0 1] 0) to (nth [2 0 1] 1)]\\n  (nth (nth [[0 2 5]\\r\\n              [1 0 4]\\r\\n              [5 3 0]] from) to))" "(clojure-ai-genalg.utils/cost-from-to clojure-ai-genalg.city-examples/city-example1 2 3)" "(clojure-ai-genalg.utils/cost-from-to clojure-ai-genalg.city-examples/city-example1 2 1)" "(peek [3 2 1])" "(rate-path clojure-ai-genalg.city-examples/city-example1 [2 0 1])" "(run-tests)" "(ns-unmap *ns* test-rate-individual)" "(ns-unmap *ns* 'test-rate-individual)" "(run-tests)" "(heal-self \\n  (rate-individual (->Individual \\r\\n                                     (get-binary-rep-from-decimal-rep 4 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example1)))))\\r\\n                                     94\\r\\n                                     (decimal-rep-to-path 4 clojure-ai-genalg.city-examples/city-example1)\\r\\n                                     clojure-ai-genalg.city-examples/city-example1\\r\\n                                     0)))" "\\n  (rate-individual (->Individual \\r\\n                                     (get-binary-rep-from-decimal-rep 4 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example1)))))\\r\\n                                     94\\r\\n                                     (decimal-rep-to-path 4 clojure-ai-genalg.city-examples/city-example1)\\r\\n                                     clojure-ai-genalg.city-examples/city-example1\\r\\n                                     0))" "(heal-self \\n  (rate-individual (->Individual \\r\\n                                     (get-binary-rep-from-decimal-rep 4 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example1)))))\\r\\n                                     94\\r\\n                                     (decimal-rep-to-path 4 clojure-ai-genalg.city-examples/city-example1)\\r\\n                                     clojure-ai-genalg.city-examples/city-example1\\r\\n                                     0)))" "(decimal-rep-to-path 4 clojure-ai-genalg.city-examples/city-example1)" "(->Individual \\r\\n                                        (get-binary-rep-from-decimal-rep 4 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example1)))))\\r\\n                                        94\\r\\n                                        (decimal-rep-to-path 4 clojure-ai-genalg.city-examples/city-example1)\\r\\n                                        clojure-ai-genalg.city-examples/city-example1\\r\\n                                        0)" "(heal-self (->Individual \\r\\n                                        (get-binary-rep-from-decimal-rep 4 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example1)))))\\r\\n                                        94\\r\\n                                        (decimal-rep-to-path 4 clojure-ai-genalg.city-examples/city-example1)\\r\\n                                        clojure-ai-genalg.city-examples/city-example1\\r\\n                                        0))" "(run-tests)" "(heal-self (->Individual \\r\\n                                        (get-binary-rep-from-decimal-rep 4 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example1)))))\\r\\n                                        94\\r\\n                                        (decimal-rep-to-path 4 clojure-ai-genalg.city-examples/city-example1)\\r\\n                                        clojure-ai-genalg.city-examples/city-example1\\r\\n                                        0))" "(run-tests)" "(init-population 5 clojure-ai-genalg.city-examples/city-example1)" "(run-tests)" "(take 5 (repeatedly (spawn-individual clojure-ai-genalg.city-examples/city-example1))\\n     )" "(spawn-individual clojure-ai-genalg.city-examples/city-example1)" "(take 5 (repeatedly \#(spawn-individual clojure-ai-genalg.city-examples/city-example1)))" "(sort-by \:total-cost (take 5 (repeatedly \#(spawn-individual clojure-ai-genalg.city-examples/city-example1))))" "(init-population 50 clojure-ai-genalg.city-examples/city-example1)" "(take 5 (init-population 50 clojure-ai-genalg.city-examples/city-example1))" "(nth (take 5 (init-population 50 clojure-ai-genalg.city-examples/city-example1)) 1)" "{(nth (take 5 (init-population 50 clojure-ai-genalg.city-examples/city-example1)) 1) \:binary-rep}" "(\:binary-rep (nth (take 5 (init-population 50 clojure-ai-genalg.city-examples/city-example1)) 1))" "(clojure-ai-genalg.utils/replace-nth-char-in-string \\"000123\\" 3 \\"z\\")" "(mutator1 (spawn-individual clojure-ai-genalg.city-examples/city-example1 3))" "(mutator1 (spawn-individual clojure-ai-genalg.city-examples/city-example1 3) 0.3)" "(mutator1 (spawn-individual clojure-ai-genalg.city-examples/city-example1 3) 0.9)" "(defn proba\\n  [individual]\\n  (let [number (int (* (rand) (count (\:binary-rep individual))))]\\r\\n      (if (\= (int (nth (\:binary-rep individual) number)) 1)\\r\\n        (replace-nth-char-in-string (\:binary-rep individual) number 0)\\r\\n        (replace-nth-char-in-string (\:binary-rep individual) number 1))))" "(proba (spawn-individual clojure-ai-genalg.city-examples/city-example1 3))" "(defn proba2\\n  [individual]\\n  (int (* (rand) (count (\:binary-rep individual)))))" "(proba2 (spawn-individual clojure-ai-genalg.city-examples/city-example1 3))" "(nth (str 1101) 2)" "(int (nth (str 1101) 2))" "(mutator1 (spawn-individual clojure-ai-genalg.city-examples/city-example1 3) 0.9)" "(mutate-function (spawn-individual clojure-ai-genalg.city-examples/city-example1 3) mutator1 0.9)" "(mutator1 (spawn-individual clojure-ai-genalg.city-examples/city-example1 3) 0.9)" "(mutate-function (spawn-individual clojure-ai-genalg.city-examples/city-example1 3) mutator1 0.9)" "(run-tests)" "(test test-force-fix)" "(run-tests)" "(->Individual \\r\\n                                     (get-binary-rep-from-decimal-rep 7 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example1)))))\\r\\n                                     7\\r\\n                                     (decimal-rep-to-path 7 clojure-ai-genalg.city-examples/city-example1)\\r\\n                                     clojure-ai-genalg.city-examples/city-example1\\r\\n                                     0)" "(run-tests)" "(use 'clojure.tools.trace)" "(deftrace force-fix)" "(deftrace traceforce force-fix)" "(deftrace traceforce [individual] (force-fix individual))" "(traceforce (->Individual \\r\\n                                     (get-binary-rep-from-decimal-rep 7 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example2)))))\\r\\n                                     7\\r\\n                                     (decimal-rep-to-path 7 clojure-ai-genalg.city-examples/city-example2)\\r\\n                                     clojure-ai-genalg.city-examples/city-example2\\r\\n                                     0))" "(- (clojure-ai-genalg.utils/factorial (count (\:map-of-cities individual)) (\:decimal-rep individual)))" "(- (clojure-ai-genalg.utils/factorial (count (clojure-ai-genalg.city-examples/city-example2))\\n                                      7))" "(- (clojure-ai-genalg.utils/factorial (count (clojure-ai-genalg.city-examples/city-example2)))\\n                                      7)" "(clojure-ai-genalg.city-examples/city-example2)" "(clojure-ai-genalg.city-examples/city-example2 2)" "(- (clojure-ai-genalg.utils/factorial (count (clojure-ai-genalg.city-examples/city-example2)))\\n                                      7)" "(count clojure-ai-genalg.city-examples/city-example2)" "(- (clojure-ai-genalg.utils/factorial (count (clojure-ai-genalg.city-examples/city-example2)))\\n                                      7)" "(- (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example2)) 7)" "(->Individual \\r\\n                                     (get-binary-rep-from-decimal-rep 7 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example1)))))\\r\\n                                     7\\r\\n                                     (decimal-rep-to-path 7 clojure-ai-genalg.city-examples/city-example1)\\r\\n                                     clojure-ai-genalg.city-examples/city-example1\\r\\n                                     0)" "(->Individual \\r\\n                                     (get-binary-rep-from-decimal-rep 7 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example2)))))\\r\\n                                     7\\r\\n                                     (decimal-rep-to-path 7 clojure-ai-genalg.city-examples/city-example2)\\r\\n                                     clojure-ai-genalg.city-examples/city-example1\\r\\n                                     0)" "(test-force-fix)" "(->Individual \\r\\n                                     (get-binary-rep-from-decimal-rep 7 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example2)))))\\r\\n                                     7\\r\\n                                     (decimal-rep-to-path 7 clojure-ai-genalg.city-examples/city-example2)\\r\\n                                     clojure-ai-genalg.city-examples/city-example2\\r\\n                                     0)" "(force-fix (->Individual \\r\\n                                     (get-binary-rep-from-decimal-rep 7 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example2)))))\\r\\n                                     7\\r\\n                                     (decimal-rep-to-path 7 clojure-ai-genalg.city-examples/city-example2)\\r\\n                                     clojure-ai-genalg.city-examples/city-example2\\r\\n                                     0))" "(- (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example2)) 7)" "(clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example2))" "(spawn-individual clojure-ai-genalg.city-examples/city-example2 17)" "(->Individual \\r\\n                                     (get-binary-rep-from-decimal-rep 7 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example2)))))\\r\\n                                     7\\r\\n                                     (decimal-rep-to-path 7 clojure-ai-genalg.city-examples/city-example2)\\r\\n                                     clojure-ai-genalg.city-examples/city-example2\\r\\n                                     0)" "(test-force-fix)" "(force-fix (->Individual \\r\\n                                     (get-binary-rep-from-decimal-rep 7 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example2)))))\\r\\n                                     7\\r\\n                                     (decimal-rep-to-path 7 clojure-ai-genalg.city-examples/city-example2)\\r\\n                                     clojure-ai-genalg.city-examples/city-example2\\r\\n                                     0))" "(->Individual \\r\\n                                     (get-binary-rep-from-decimal-rep 7 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example2)))))\\r\\n                                     7\\r\\n                                     (decimal-rep-to-path 7 clojure-ai-genalg.city-examples/city-example2)\\r\\n                                     clojure-ai-genalg.city-examples/city-example2\\r\\n                                     0)" "(- (clojure-ai-genalg.utils/factorial (count (\:map-of-cities (->Individual \\r\\n                                     (get-binary-rep-from-decimal-rep 7 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example2)))))\\r\\n                                     7\\r\\n                                     (decimal-rep-to-path 7 clojure-ai-genalg.city-examples/city-example2)\\r\\n                                     clojure-ai-genalg.city-examples/city-example2\\r\\n                                     0)))))" "(force-fix (->Individual \\r\\n                                     (get-binary-rep-from-decimal-rep 7 (java.lang.Math/ceil (clojure-ai-genalg.utils/log2 (clojure-ai-genalg.utils/factorial (count clojure-ai-genalg.city-examples/city-example2)))))\\r\\n                                     7\\r\\n                                     (decimal-rep-to-path 7 clojure-ai-genalg.city-examples/city-example2)\\r\\n                                     clojure-ai-genalg.city-examples/city-example2\\r\\n                                     0))" "(run-tests)" "(replace-nth-char-in-string \\"01110\\" 3 0)" "(crossover-individuals (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         3)\\n                       (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         5))" "(trace crossover-individuals)" "(use 'clojure.trace)" "(use 'clojure.tools.trace)" "(trace crossover-individuals)" "(crossover-individuals (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         3)\\n                       (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         5))" "(deftrace tracecross crossover-individuals)" "(deftrace tracecross [individual1 individual2] crossover-individuals)" "(tracecross (spawn-individual\\r\\n                            clojure-ai-genalg.city-examples/city-example1\\r\\n                            3)\\r\\n                          (spawn-individual\\r\\n                            clojure-ai-genalg.city-examples/city-example1\\r\\n                            5))" "(crossover-individuals (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         3)\\n                       (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         5))" "(crossover-individuals (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         1)\\n                       (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         6))" "(crossover-individuals (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         1)\\n                       (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         3))" "(crossover-individuals (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         3)\\n                       (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         5))" "(force-fix (assoc (spawn-individual clojure-ai-genalg.city-examples/city-example1 4)\\n                  \:decimal-rep 7))" "(crossover-individuals (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         3)\\n                       (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         5))" "(spawn-individual clojure-ai-genalg.city-examples/city-example1 1)" "(crossover-individuals (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         3)\\n                       (spawn-individual\\n                         clojure-ai-genalg.city-examples/city-example1\\n                         5))" "(loop (init-population 40 clojure-ai-genalg.city-examples/city-example1))" "(loop [population (init-population 40 clojure-ai-genalg.city-examples/city-example1)])" "(loop [population (init-population 40 clojure-ai-genalg.city-examples/city-example1)]\\n  (recur (mutate-function population mutator1 0.30)))" "(init-population 20 clojure-ai-genalg.city-examples/city-example1)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 50\\n 10)" "(crossover-step (init-population 20 clojure-ai-genalg.city-examples/city-example1))" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 50\\n 10)" "(init-population 20 clojure-ai-genalg.city-examples/city-example1)" "(init-population 2 clojure-ai-genalg.city-examples/city-example1)" "(nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 2)" "(nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1)" "(crossover-individuals \\n  (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\n  (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 50\\n 10)" "(use 'clojure.tools.trace)" "(trace-ns)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 50\\n 0)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 50\\n 1)" "(trace-ns clojure-ai-genalg.ai-genalg)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 50\\n 1)" "(untrace-ns)" "(use 'clojure.tools.trace)" "(trace-ns \\n  'clojure-ai-genalg.ai-genalg)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 50\\n 1)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 10\\n 20)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 10\\n 1)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 10\\n 3)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 10\\n 2)" "(crossover-individuals \\n  (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\n  (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))" "(conj (crossover-individuals \\n       (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\n       (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))\\n     (crossover-individuals \\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1)))" "(kill-off-excess (conj (crossover-individuals \\n            (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\n            (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))\\n          (crossover-individuals \\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))) 3)" "(kill-off-excess (conj (crossover-individuals \\n            (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\n            (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))\\n          (crossover-individuals \\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))) 1)" "(crossover-individuals \\n  (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\n  (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))" "(conj (crossover-individuals \\n       (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\n       (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))\\n     (crossover-individuals \\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1)))" "(trace-ns \\n  'clojure-ai-genalg.ai-genalg)" "(trace-ns 'clojure-ai-genalg.ai-genalg)" "(use 'clojure.tools.trace)" "(trace-ns \\n  'clojure-ai-genalg.ai-genalg)" "(kill-off-excess (conj (crossover-individuals \\n            (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\n            (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))\\n          (crossover-individuals \\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))) 1)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 10\\n 2)" "(untrace-ns \\n  'clojure-ai-genalg.ai-genalg)" "(kill-off-excess (conj (crossover-individuals \\n            (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\n            (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))\\n          (crossover-individuals \\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))) 1)" "(kill-off-excess (into-array (crossover-individuals \\n            (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\n            (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))\\n          (crossover-individuals \\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))) 5)" "(kill-off-excess (into (crossover-individuals \\n            (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\n            (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))\\n          (crossover-individuals \\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 0)\\r\\n        (nth (init-population 2 clojure-ai-genalg.city-examples/city-example1) 1))) 5)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 10\\n 2)" "(trace-ns \\n  'clojure-ai-genalg.ai-genalg)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 10\\n 2)" "(trace-ns \\n  'clojure-ai-genalg.ai-genalg)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 10\\n 2)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 10\\n 10)" "(apply mutator1 (init-population 10 clojure-ai-genalg.city-examples/city-example1))" "(apply mutator1 ((init-population 10 clojure-ai-genalg.city-examples/city-example1)))" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 10\\n 10)" "(apply mutator1 (init-population 10 clojure-ai-genalg.city-examples/city-example1))" "(mutate-step (init-population 10 clojure-ai-genalg.city-examples/city-example1) mutator1 0.3)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example1\\n 0.4\\n mutator1\\n 10\\n 10)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-examplew\\n 0.4\\n mutator1\\n 10000\\n 100000)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example2\\n 0.4\\n mutator1\\n 10000\\n 100000)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example2\\n 0.4\\n mutator1\\n 10000\\n 100)" "(genetic-algorithm\\n clojure-ai-genalg.city-examples/city-example2\\n 0.4\\n mutator1\\n 10\\n 100)"]
eclipse.preferences.version=1
